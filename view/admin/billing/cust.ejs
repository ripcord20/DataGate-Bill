<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kelola Pelanggan - Admin Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <style>
        .toast-container {
            z-index: 9999;
        }
        .toast {
            min-width: 300px;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <%- include('../../partials/billing-sidebar') %>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">
                        <i class="bx bx-user"></i> Kelola Pelanggan
                    </h1>
                    <div>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCustomerModal">
                            <i class="bx bx-plus"></i> Tambah Pelanggan
                        </button>
                        <div class="btn-group ms-2" role="group" aria-label="Backup Restore Pelanggan">
                            <button id="exportCustomersJsonBtn" type="button" class="btn btn-outline-success">
                                <i class="bi bi-cloud-download"></i> Backup Pelanggan (JSON)
                            </button>
                            <button id="exportCustomersXlsxBtn" type="button" class="btn btn-outline-success">
                                <i class="bi bi-file-earmark-spreadsheet"></i> Backup Pelanggan (XLSX)
                            </button>
                            <button id="openImportCustomersModalBtn" type="button" class="btn btn-outline-warning" data-bs-toggle="modal" data-bs-target="#importCustomersModal">
                                <i class="bi bi-cloud-upload"></i> Restore Pelanggan
                            </button>
                        </div>

    <!-- Import Customers Modal -->
    <div class="modal fade" id="importCustomersModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Restore Data Pelanggan (Import JSON)</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="importCustomersForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Pilih File (JSON atau XLSX)</label>
                            <input type="file" id="customersFile" name="file" accept="application/json,.json,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,.xlsx" class="form-control" required>
                            <small class="form-text text-muted">Dukungan: JSON (disarankan) atau Excel XLSX. JSON bisa berupa array atau { customers: [...] }.</small>
                        </div>
                        <div class="alert alert-info" role="alert">
                            Catatan: Data dengan nomor telepon yang sama akan diupdate. Data baru akan dibuat otomatis.
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                        <button type="submit" class="btn btn-warning">
                            <i class="bi bi-cloud-upload"></i> Import
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
                    </div>
                </div>

                <!-- Summary Cards -->
                <div class="row mb-4">
                    <div class="col-xl-2 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="text-muted fw-normal mt-0" title="Total Customers">Total Pelanggan</h5>
                                        <h3 class="mt-3 mb-3"><%= customers ? customers.length : 0 %></h3>
                                    </div>
                                    <div class="avatar-sm">
                                        <span class="avatar-title bg-soft-primary rounded">
                                            <i class="mdi mdi-account-group font-20 text-primary"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-xl-2 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="text-muted fw-normal mt-0" title="Paid Customers">Sudah Bayar</h5>
                                        <h3 class="mt-3 mb-3">
                                            <%= customers ? customers.filter(c => c.payment_status === 'paid').length : 0 %>
                                        </h3>
                                    </div>
                                    <div class="avatar-sm">
                                        <span class="avatar-title bg-soft-success rounded">
                                            <i class="mdi mdi-cash-check font-20 text-success"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-xl-2 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="text-muted fw-normal mt-0" title="Unpaid Customers">Belum Bayar</h5>
                                        <h3 class="mt-3 mb-3">
                                            <%= customers ? customers.filter(c => c.payment_status === 'unpaid').length : 0 %>
                                        </h3>
                                    </div>
                                    <div class="avatar-sm">
                                        <span class="avatar-title bg-soft-warning rounded">
                                            <i class="mdi mdi-cash-remove font-20 text-warning"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-xl-2 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="text-muted fw-normal mt-0" title="Overdue Customers">Isolir</h5>
                                        <h3 class="mt-3 mb-3">
                                            <%= customers ? customers.filter(c => c.payment_status === 'overdue' || c.status === 'suspended').length : 0 %>
                                        </h3>
                                    </div>
                                    <div class="avatar-sm">
                                        <span class="avatar-title bg-soft-danger rounded">
                                            <i class="mdi mdi-alert-circle font-20 text-danger"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-xl-2 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="text-muted fw-normal mt-0" title="No Invoice Customers">Non Tagihan</h5>
                                        <h3 class="mt-3 mb-3">
                                            <%= customers ? customers.filter(c => c.payment_status === 'no_invoice').length : 0 %>
                                        </h3>
                                    </div>
                                    <div class="avatar-sm">
                                        <span class="avatar-title bg-soft-info rounded">
                                            <i class="mdi mdi-receipt-outline font-20 text-info"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-xl-2 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="text-muted fw-normal mt-0" title="Active Customers">Pelanggan Aktif</h5>
                                        <h3 class="mt-3 mb-3">
                                            <%= customers ? customers.filter(c => c.status === 'active').length : 0 %>
                                        </h3>
                                    </div>
                                    <div class="avatar-sm">
                                        <span class="avatar-title bg-soft-success rounded">
                                            <i class="mdi mdi-account-check font-20 text-success"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Customer Table -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bx bx-list-ul"></i> Daftar Pelanggan
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAllCustomers">
                                    <label class="form-check-label" for="selectAllCustomers">
                                        Pilih Semua
                                    </label>
                                </div>
                            </div>
                            <div>
                                <button id="bulkDeleteBtn" class="btn btn-danger btn-sm" disabled>
                                    <i class="bx bx-trash"></i> Hapus Terpilih
                                </button>
                            </div>
                        </div>
                        <div class="table-responsive">
                            <table id="customersTable" class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th style="width:32px">
                                            <!-- header checkbox already above -->
                                        </th>
                                        <th>Nama</th>
                                        <th>Telepon</th>

                                        <th>PPPoE Username</th>
                                        <th>Paket</th>
                                        <th>PPPoE Profile</th>
                                        <th>Auto Suspension</th>
                                        <th>Status Pelanggan</th>
                                        <th>Status Pembayaran</th>
                                        <th>Aksi</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% if (customers && customers.length > 0) { %>
                                        <% customers.forEach(function(customer) { %>
                                            <tr data-phone="<%= customer.phone %>" data-username="<%= customer.pppoe_username %>">
                                                <td>
                                                    <input type="checkbox" class="form-check-input customer-checkbox" value="<%= customer.phone %>">
                                                </td>
                                                <td><%= customer.name %></td>
                                                <td><%= customer.phone %></td>

                                                <td><%= customer.pppoe_username || '-' %></td>
                                                <td><%= customer.package_name || '-' %></td>
                                                <td class="pppoe-profile"><span class="badge bg-info"><%= customer.pppoe_profile || 'default' %></span></td>
                                                <td>
                                                    <% if (customer.auto_suspension === 1) { %>
                                                        <span class="badge bg-success">Ya</span>
                                                    <% } else { %>
                                                        <span class="badge bg-secondary">Tidak</span>
                                                    <% } %>
                                                </td>
                                                <td class="cust-status">
                                                    <% if (customer.status === 'active') { %>
                                                        <span class="badge bg-success">Aktif</span>
                                                    <% } else if (customer.status === 'suspended') { %>
                                                        <span class="badge bg-danger">Isolir</span>
                                                    <% } else { %>
                                                        <span class="badge bg-secondary">Nonaktif</span>
                                                    <% } %>
                                                </td>
                                                <td class="pay-status">
                                                    <% if (customer.payment_status === 'paid') { %>
                                                        <span class="badge bg-success">Lunas</span>
                                                    <% } else if (customer.payment_status === 'unpaid') { %>
                                                        <span class="badge bg-warning">Belum Lunas</span>
                                                    <% } else if (customer.payment_status === 'overdue') { %>
                                                        <span class="badge bg-danger">Terlambat</span>
                                                    <% } else { %>
                                                        <span class="badge bg-info">Belum Ada Tagihan</span>
                                                    <% } %>
                                                </td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <button class="btn btn-sm btn-primary" onclick="editCustomer('<%= customer.phone %>')">
                                                            <i class="bx bx-edit"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-danger" onclick="deleteCustomer('<%= customer.phone %>')">
                                                            <i class="bx bx-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script>
    // Update summary cards dynamically
    function updateSummaryCards(data) {
        try {
            const mappings = [
                { selector: 'h3.mt-3.mb-3', index: 0, value: data.total }, // first card total customers
            ];
            // Because the structure is uniform, query all h3s inside summary row and set by order.
            const row = document.querySelectorAll('.row.mb-4 .card .card-body h3.mt-3.mb-3');
            if (row && row.length >= 6) {
                row[0].textContent = data.total;
                row[1].textContent = data.paid;
                row[2].textContent = data.unpaid;
                row[3].textContent = data.isolir;
                row[4].textContent = data.noInvoice;
                row[5].textContent = data.active;
            }
        } catch (e) {
            console.warn('Failed to update summary cards:', e);
        }
    }

    async function fetchSummary() {
        try {
            const resp = await fetch('/admin/billing/customers/summary');
            const res = await resp.json();
            if (res.success && res.data) {
                updateSummaryCards(res.data);
            }
        } catch (e) {
            console.warn('Failed to fetch summary:', e);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        fetchSummary();
        setInterval(fetchSummary, 5000);
    });
    </script>

    <script>
    // Live update table rows
    function renderStatusBadge(status) {
        if (status === 'active') return '<span class="badge bg-success">Aktif</span>';
        if (status === 'suspended') return '<span class="badge bg-danger">Isolir</span>';
        return '<span class="badge bg-secondary">Nonaktif</span>';
    }
    function renderPayBadge(p) {
        if (p === 'paid') return '<span class="badge bg-success">Lunas</span>';
        if (p === 'unpaid') return '<span class="badge bg-warning">Belum Lunas</span>';
        if (p === 'overdue') return '<span class="badge bg-danger">Terlambat</span>';
        return '<span class="badge bg-info">Belum Ada Tagihan</span>';
    }
    async function refreshCustomersTable() {
        try {
            const resp = await fetch('/admin/billing/customers/list');
            const res = await resp.json();
            if (!res.success || !Array.isArray(res.customers)) return;

            const byUser = new Map(res.customers.filter(c => c.pppoe_username).map(c => [String(c.pppoe_username), c]));
            const byPhone = new Map(res.customers.filter(c => c.phone).map(c => [String(c.phone), c]));
            document.querySelectorAll('#customersTable tbody tr[data-phone],#customersTable tbody tr[data-username]')
                .forEach(tr => {
                    const uname = tr.getAttribute('data-username');
                    const phone = tr.getAttribute('data-phone');
                    const c = (uname && byUser.get(uname)) || (phone && byPhone.get(phone));
                    if (!c) return;
                    const statusTd = tr.querySelector('td.cust-status');
                    const payTd = tr.querySelector('td.pay-status');
                    const profTd = tr.querySelector('td.pppoe-profile');
                    if (statusTd) statusTd.innerHTML = renderStatusBadge(c.status);
                    if (payTd) payTd.innerHTML = renderPayBadge(c.payment_status);
                    if (profTd) profTd.innerHTML = `<span class="badge bg-info">${c.pppoe_profile || 'default'}</span>`;
                });
        } catch (e) {
            console.warn('Failed to refresh customers table:', e);
        }
    }
    document.addEventListener('DOMContentLoaded', () => {
        refreshCustomersTable();
        setInterval(refreshCustomersTable, 5000);
    });
    </script>

    <!-- Add Customer Modal -->
    <div class="modal fade" id="addCustomerModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Tambah Pelanggan</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="addCustomerForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="name" class="form-label">Nama *</label>
                            <input type="text" class="form-control" id="name" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="phone" class="form-label">Telepon *</label>
                            <input type="text" class="form-control" id="phone" name="phone" required>
                        </div>

                        <div class="mb-3">
                            <label for="pppoe_username" class="form-label">PPPoE Username (opsional)</label>
                            <input type="text" class="form-control" id="pppoe_username" name="pppoe_username" placeholder="username@domain">
                        </div>
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="create_pppoe_user" name="create_pppoe_user">
                            <label class="form-check-label" for="create_pppoe_user">
                                Buat user PPPoE di Mikrotik sekarang (pakai profile dari paket)
                            </label>
                        </div>
                        <div class="row g-2 align-items-end mb-3" id="pppoe_password_row" style="display:none;">
                            <div class="col-8">
                                <label for="pppoe_password" class="form-label">PPPoE Password</label>
                                <input type="text" class="form-control" id="pppoe_password" name="pppoe_password" placeholder="Minimal 6 karakter">
                                <small class="text-muted">Jika tidak diisi, sistem akan generate otomatis.</small>
                            </div>
                            <div class="col-4">
                                <button class="btn btn-outline-secondary w-100" type="button" id="genPppoePassBtn">Generate</button>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="address" class="form-label">Alamat</label>
                            <textarea class="form-control" id="address" name="address" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="package_id" class="form-label">Paket *</label>
                            <select class="form-control" id="package_id" name="package_id" onchange="updateProfileField()" required>
                                <option value="">Pilih Paket</option>
                                <% if (packages && packages.length > 0) { %>
                                    <% packages.forEach(function(package) { %>
                                        <option value="<%= package.id %>" data-profile="<%= package.pppoe_profile || 'default' %>"><%= package.name %> - Rp <%= parseFloat(package.price).toLocaleString('id-ID') %></option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="pppoe_profile" class="form-label">PPPoE Profile</label>
                            <input type="text" class="form-control" id="pppoe_profile" name="pppoe_profile" placeholder="Profile akan otomatis terisi sesuai paket">
                            <small class="form-text text-muted">Profile PPPoE yang akan digunakan untuk pelanggan ini</small>
                        </div>
                        <div class="mb-3">
                            <label for="auto_suspension" class="form-label">Auto Suspension</label>
                            <select class="form-control" id="auto_suspension" name="auto_suspension">
                                <option value="1">Ya - Isolir otomatis saat telat bayar</option>
                                <option value="0">Tidak - Tidak diisolir otomatis</option>
                            </select>
                            <small class="form-text text-muted">Pilih apakah pelanggan akan diisolir otomatis saat telat bayar</small>
                        </div>
                        <div class="mb-3">
                            <label for="billing_day" class="form-label">Tanggal Penagihan (1-28)</label>
                            <input type="number" class="form-control" id="billing_day" name="billing_day" min="1" max="28" value="15">
                            <small class="form-text text-muted">Tanggal jatuh tempo tagihan setiap bulan. Nilai di luar 28 akan disesuaikan.</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Simpan</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Customer Modal -->
    <div class="modal fade" id="editCustomerModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Pelanggan</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="editCustomerForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="edit_name" class="form-label">Nama *</label>
                            <input type="text" class="form-control" id="edit_name" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="edit_phone" class="form-label">Telepon *</label>
                            <input type="text" class="form-control" id="edit_phone" name="phone" readonly>
                            <small class="form-text text-muted">Nomor telepon tidak dapat diubah</small>
                        </div>
                        <div class="mb-3">
                            <label for="edit_pppoe_username" class="form-label">PPPoE Username</label>
                            <input type="text" class="form-control" id="edit_pppoe_username" name="pppoe_username">
                        </div>
                        <div class="mb-3">
                            <label for="edit_address" class="form-label">Alamat</label>
                            <textarea class="form-control" id="edit_address" name="address" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="edit_package_id" class="form-label">Paket *</label>
                            <select class="form-control" id="edit_package_id" name="package_id" onchange="updateEditProfileField()" required>
                                <option value="">Pilih Paket</option>
                                <% if (packages && packages.length > 0) { %>
                                    <% packages.forEach(function(package) { %>
                                        <option value="<%= package.id %>" data-profile="<%= package.pppoe_profile || 'default' %>"><%= package.name %> - Rp <%= parseFloat(package.price).toLocaleString('id-ID') %></option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="edit_pppoe_profile" class="form-label">PPPoE Profile</label>
                            <input type="text" class="form-control" id="edit_pppoe_profile" name="pppoe_profile" placeholder="Profile akan otomatis terisi sesuai paket">
                            <small class="form-text text-muted">Profile PPPoE yang akan digunakan untuk pelanggan ini</small>
                        </div>
                        <div class="mb-3">
                            <label for="edit_auto_suspension" class="form-label">Auto Suspension</label>
                            <select class="form-control" id="edit_auto_suspension" name="auto_suspension">
                                <option value="1">Ya - Isolir otomatis saat telat bayar</option>
                                <option value="0">Tidak - Tidak diisolir otomatis</option>
                            </select>
                            <small class="form-text text-muted">Pilih apakah pelanggan akan diisolir otomatis saat telat bayar</small>
                        </div>
                        <div class="mb-3">
                            <label for="edit_billing_day" class="form-label">Tanggal Penagihan (1-28)</label>
                            <input type="number" class="form-control" id="edit_billing_day" name="billing_day" min="1" max="28" value="15">
                            <small class="form-text text-muted">Tanggal jatuh tempo tagihan setiap bulan. Nilai di luar 28 akan disesuaikan.</small>
                        </div>
                        <div class="mb-3">
                            <label for="edit_status" class="form-label">Status</label>
                            <select class="form-control" id="edit_status" name="status">
                                <option value="active">Aktif</option>
                                <option value="suspended">Isolir</option>
                                <option value="inactive">Nonaktif</option>
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Update</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Import Customers Modal -->
    <div class="modal fade" id="importCustomersModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Import Pelanggan</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="importCustomersForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="customersJsonFile" class="form-label">Pilih file JSON</label>
                            <input type="file" class="form-control" id="customersJsonFile" name="file" accept=".json" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                        <button type="submit" class="btn btn-primary">Import</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script>
        $(document).ready(function() {
            const dt = $('#customersTable').DataTable({
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.11.5/i18n/id.json'
                },
                pageLength: 25,
                lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]]
            });

            // Update bulk delete button state
            function updateBulkState() {
                const anyChecked = $('.customer-checkbox:checked').length > 0;
                $('#bulkDeleteBtn').prop('disabled', !anyChecked);
                const total = $('.customer-checkbox').length;
                const checked = $('.customer-checkbox:checked').length;
                const selectAll = document.getElementById('selectAllCustomers');
                selectAll.indeterminate = checked > 0 && checked < total;
                selectAll.checked = checked > 0 && checked === total;
            }

            // Select all handler
            $('#selectAllCustomers').on('change', function() {
                const checked = this.checked;
                $('.customer-checkbox').prop('checked', checked);
                updateBulkState();
            });

            // Row checkbox handler
            $(document).on('change', '.customer-checkbox', updateBulkState);

            // Re-bind after table draw (pagination/search)
            dt.on('draw', function() {
                updateBulkState();
            });

            // Bulk delete click
            $('#bulkDeleteBtn').on('click', function() {
                const phones = $('.customer-checkbox:checked').map(function(){ return this.value; }).get();
                if (phones.length === 0) return;
                if (!confirm(`Hapus ${phones.length} pelanggan terpilih?`)) return;

                const btn = $(this);
                const original = btn.html();
                btn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Menghapus...');

                fetch('/admin/billing/customers/bulk-delete', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ phones })
                })
                .then(r => r.json())
                .then(data => {
                    if (data.success) {
                        const s = data.summary || {}; 
                        showToast('success', `Hapus massal selesai. Berhasil: ${s.success||0}, Gagal: ${s.failed||0}`);
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast('error', data.message || 'Gagal hapus massal');
                    }
                })
                .catch(err => {
                    console.error(err);
                    showToast('error', 'Terjadi kesalahan saat hapus massal');
                })
                .finally(() => {
                    btn.prop('disabled', false).html(original);
                });
            });
            
            // Reset form when modal is hidden
            $('#addCustomerModal').on('hidden.bs.modal', function() {
                $('#addCustomerForm')[0].reset();
            });
            
            $('#editCustomerModal').on('hidden.bs.modal', function() {
                $('#editCustomerForm')[0].reset();
            });

            // Export customers JSON
            $('#exportCustomersJsonBtn').on('click', function() {
                window.location.href = '/admin/billing/export/customers.json';
            });

            // Export customers XLSX
            $('#exportCustomersXlsxBtn').on('click', function() {
                window.location.href = '/admin/billing/export/customers.xlsx';
            });

            // Import customers JSON
            $('#importCustomersForm').on('submit', function(e) {
                e.preventDefault();
                const fileInput = document.getElementById('customersFile');
                if (!fileInput.files || fileInput.files.length === 0) {
                    showToast('error', 'Silakan pilih file JSON terlebih dahulu');
                    return;
                }

                const formData = new FormData();
                formData.append('file', fileInput.files[0]);

                const submitBtn = $(this).find('button[type="submit"]');
                const originalText = submitBtn.html();
                submitBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Mengunggah...');

                const isXlsx = /\.xlsx$/i.test(fileInput.files[0].name);
                const url = isXlsx ? '/admin/billing/import/customers/xlsx' : '/admin/billing/import/customers/json';
                fetch(url, {
                    method: 'POST',
                    body: formData
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        const s = data.summary || {};
                        showToast('success', `Import selesai. Dibuat: ${s.created||0}, Diupdate: ${s.updated||0}, Gagal: ${s.failed||0}`);
                        $('#importCustomersModal').modal('hide');
                        setTimeout(() => location.reload(), 1200);
                    } else {
                        showToast('error', data.message || 'Gagal import data pelanggan');
                    }
                })
                .catch(err => {
                    console.error(err);
                    showToast('error', 'Terjadi kesalahan saat import');
                })
                .finally(() => {
                    submitBtn.prop('disabled', false).html(originalText);
                });
            });
        });

        // Function to update profile field when package is selected
        function updateProfileField() {
            const packageSelect = document.getElementById('package_id');
            const profileInput = document.getElementById('pppoe_profile');
            const selectedOption = packageSelect.options[packageSelect.selectedIndex];
            
            if (selectedOption && selectedOption.dataset.profile) {
                profileInput.value = selectedOption.dataset.profile;
            }
        }

        // Function to update profile field in edit modal
        function updateEditProfileField() {
            const packageSelect = document.getElementById('edit_package_id');
            const profileInput = document.getElementById('edit_pppoe_profile');
            const selectedOption = packageSelect.options[packageSelect.selectedIndex];
            
            if (selectedOption && selectedOption.dataset.profile) {
                profileInput.value = selectedOption.dataset.profile;
            }
        }

        // Add Customer Form
        $('#addCustomerForm').on('submit', function(e) {
            e.preventDefault();
            
            // Client-side validation
            const name = $('#name').val().trim();
            const phone = $('#phone').val().trim();
            const package_id = $('#package_id').val();
            const createPppoe = $('#create_pppoe_user').is(':checked');
            const pppoeUser = $('#pppoe_username').val().trim();
            
            if (!name || !phone || !package_id) {
                showToast('error', 'Nama, telepon, dan paket wajib diisi');
                return;
            }
            if (createPppoe && !pppoeUser) {
                showToast('error', 'Isi PPPoE Username jika ingin membuat user di Mikrotik');
                return;
            }
            
            // Show loading state
            const submitBtn = $(this).find('button[type="submit"]');
            const originalText = submitBtn.text();
            submitBtn.prop('disabled', true).text('Menyimpan...');
            
            const formData = {
                name: name,
                phone: phone,
                pppoe_username: pppoeUser,
                address: $('#address').val().trim(),
                package_id: package_id,
                pppoe_profile: $('#pppoe_profile').val().trim() || 'default',
                auto_suspension: $('#auto_suspension').val(),
                create_pppoe_user: createPppoe ? 1 : 0,
                pppoe_password: $('#pppoe_password').val().trim(),
                billing_day: (function() {
                    const v = parseInt($('#billing_day').val(), 10);
                    if (Number.isFinite(v)) return Math.min(Math.max(v, 1), 28);
                    return 15;
                })()
            };
            
            fetch('/admin/billing/customers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    setTimeout(() => {
                        showToast('success', 'Pelanggan berhasil ditambahkan');
                        setTimeout(() => location.reload(), 1000);
                    }, 300);
                } else {
                    showToast('error', data.message || 'Gagal menambahkan pelanggan');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('error', 'Terjadi kesalahan');
            })
            .finally(() => {
                submitBtn.prop('disabled', false).text(originalText);
            });
        });

        // Toggle PPPoE password row visibility
        $('#create_pppoe_user').on('change', function(){
            const show = $(this).is(':checked');
            $('#pppoe_password_row').css('display', show ? '' : 'none');
        });

        // Generate password button
        $('#genPppoePassBtn').on('click', function(){
            const pass = Math.random().toString(36).slice(-8) + Math.floor(Math.random()*10);
            $('#pppoe_password').val(pass);
        });

        // Edit Customer
        function editCustomer(phone) {
            fetch(`/admin/billing/api/customers/${phone}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const customer = data.customer;
                        $('#edit_name').val(customer.name);
                        $('#edit_phone').val(customer.phone);
                        $('#edit_pppoe_username').val(customer.pppoe_username || '');
                        $('#edit_address').val(customer.address || '');
                        $('#edit_package_id').val(customer.package_id || '');
                        $('#edit_pppoe_profile').val(customer.pppoe_profile || '');
                        $('#edit_auto_suspension').val(customer.auto_suspension !== undefined ? customer.auto_suspension : 1);
                        $('#edit_status').val(customer.status);
                        $('#edit_billing_day').val((function(){
                            const v = parseInt(customer.billing_day, 10);
                            if (Number.isFinite(v)) return Math.min(Math.max(v, 1), 28);
                            return 15;
                        })());
                        $('#editCustomerModal').modal('show');
                    } else {
                        showToast('error', data.message || 'Gagal mengambil data pelanggan');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('error', 'Terjadi kesalahan');
                });
        }

        // Update Customer Form
        $('#editCustomerForm').on('submit', function(e) {
            e.preventDefault();
            
            // Client-side validation
            const name = $('#edit_name').val().trim();
            const package_id = $('#edit_package_id').val();
            
            if (!name || !package_id) {
                showToast('error', 'Nama dan paket wajib diisi');
                return;
            }
            
            // Show loading state
            const submitBtn = $(this).find('button[type="submit"]');
            const originalText = submitBtn.text();
            submitBtn.prop('disabled', true).text('Mengupdate...');
            
            const phone = $('#edit_phone').val();
            const formData = {
                name: name,
                pppoe_username: $('#edit_pppoe_username').val().trim(),
                address: $('#edit_address').val().trim(),
                package_id: package_id,
                pppoe_profile: $('#edit_pppoe_profile').val().trim() || 'default',
                auto_suspension: $('#edit_auto_suspension').val(),
                status: $('#edit_status').val(),
                billing_day: (function() {
                    const v = parseInt($('#edit_billing_day').val(), 10);
                    if (Number.isFinite(v)) return Math.min(Math.max(v, 1), 28);
                    return 15;
                })()
            };
            
            fetch(`/admin/billing/customers/${phone}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    setTimeout(() => {
                        showToast('success', 'Pelanggan berhasil diupdate');
                        setTimeout(() => location.reload(), 1000);
                    }, 300);
                } else {
                    showToast('error', data.message || 'Gagal mengupdate pelanggan');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('error', 'Terjadi kesalahan');
            })
            .finally(() => {
                submitBtn.prop('disabled', false).text(originalText);
            });
        });

        // Delete Customer
        function deleteCustomer(phone) {
            if (confirm('Apakah Anda yakin ingin menghapus pelanggan ini?')) {
                fetch(`/admin/billing/customers/${phone}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('success', 'Pelanggan berhasil dihapus');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast('error', data.message || 'Gagal menghapus pelanggan');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('error', 'Terjadi kesalahan');
                });
            }
        }

        // Toast notification function
        function showToast(type, message) {
            const toastContainer = document.getElementById('toastContainer') || createToastContainer();
            
            const toastHtml = `
                <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            
            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            const toastElement = toastContainer.lastElementChild;
            const toast = new bootstrap.Toast(toastElement);
            toast.show();
            
            // Remove toast element after it's hidden
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toastContainer';
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '9999';
            document.body.appendChild(container);
            return container;
        }
    </script>
</body>
</html> 
